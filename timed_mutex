/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include <bits/stdc++.h>

using namespace std;

// In this video we will learn about "Timed Mutex In C++ Threading (std::timed_mutex)"
// We have learned Mutex, Race Condition, Critical Section in previous videos.
// And few points to remember about timed mutex is as follows:
// 0. std::timed_mutex is blocked till timeout_time or the lock is acquired and returns true if success 
//   otherwise false.
// 1. Member Function:
//   a. lock 
//   b. try_lock
//   c. try_lock_for    ---\ These two functions makes it different from mutex.
//   d. try_lock_until  ---/ 
//   e. unlock

// EXAMPLE: try_lock_for();
// Waits until specified timeout_duration has elapsed or the lock is acquired, whichever comes first.
// On successful lock acquisition returns true, otherwise returns false.


//watch video again

int amountMoney = 0;
timed_mutex m;
void addMoney(int threadID)
{
    if(m.try_lock_for(chrono::seconds(1)))
    {
        amountMoney++;
        this_thread::sleep_for(chrono::seconds(2));
        m.unlock();
        cout<<"Entered for thread "<<threadID<<endl;
    }
    else{
        cout<<"Could not Enter for thread "<<threadID<<endl;
    }
    
}

int main()
{
    thread th1(addMoney, 1);
    thread th2(addMoney, 2);
    
    th1.join();
    th2.join();

    return 0;
}

output:
Could not Enter for thread 2
Entered for thread 1
