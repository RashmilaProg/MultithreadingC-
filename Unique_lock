/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include <bits/stdc++.h>


using namespace std;

// In this video we will learn how to use unique_lock In C++ programming language.
// Few important points to remember about the unique_lock is as follows:
// 1. The class unique_lock is a mutex ownership wrapper.
// 2. It Allows:
//     a. Can Have Different Locking Strategies
//     b. time-constrained attempts at locking (try_lock_for, try_lock_until)
//     c. recursive locking
//     d. transfer of lock ownership (move not copy)
//     e. condition variables. (See this in coming videos)

// Locking Strategies
//   TYPE           EFFECTS(S)
// 1. defer_lock  do not acquire ownership of the mutex.
// 2. try_to_lock  try to acquire ownership of the mutex without blocking.
// 3. adopt_lock  assume the calling thread already has ownership of the mutex.

int buffer = 0;
std::mutex m;

void updateBuffer(int threadId, int loopCount)
{
    //std::unique_lock<mutex> lock(m);
    std::unique_lock<mutex> lock(m, defer_lock);
    
    lock.lock();
    for(int i =0; i< loopCount; i++)
    {
        cout<<"Thread ID"<<threadId<<" buffer"<<buffer++<<endl;
    }
}

int main()
{
    std::cout<<"Hello World";
    
    thread th1(updateBuffer, 1, 10);
    thread th2(updateBuffer, 2, 10);
    
    th1.join();
    th2.join();

    return 0;
}
