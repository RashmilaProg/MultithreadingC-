/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include <bits/stdc++.h>

using namespace std;

// In this video we will learn about std::mutex::try_lock() On Mutex In C++11 Threading.
// Few points to remember about the try_lock is as follows:
// 0. try_lock() Tries to lock the mutex. Returns immediately. On successful lock acquisition returns true otherwise returns false.
// 1. If try_lock() is not able to lock mutex, then it doesn't get blocked that's why it is called non-blocking.
// 2. If try_lock is called again by the same thread which owns the mutex, the behaviour is undefined.
//   It is a dead lock situation with undefined behaviour. (if you want to be able to lock the same mutex by same thread more than one time the go for recursive_mutex)

// There are so many try_lock function
// 1. std::try_lock
// 2. std::mutex::try_lock
// 3. std::shared_lock::try_lock
// 4. std::timed_mutex::try_lock
// 5. std::unique_lock::try_lock
// 6. std::shared_mutex::try_lock
// 7. std::recursive_mutex::try_lock
// 8. std::shared_timed_mutex::try_lock
// 9. std::recursive_timed_mutex::try_lock


std::mutex m;
int counter = 0;
void fun()
{
    for(int i =0; i<10000000; i++)
    {
        if(m.try_lock())
        counter++;
        m.unlock();
    }
}

int main()
{
    std::cout<<"Hello World"<<endl;
    
    thread th1(fun);
    thread th2(fun);
    
    th1.join();
    th2.join();
    
    cout<<"Count"<<counter<<endl;

    return 0;
}
